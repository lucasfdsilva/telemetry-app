name: CI/CD Workflow

env:
  ECR_REPO: telemetry-app
  AWS_REGION: eu-west-1

on:
  push:
    branches:
      - 'main'
      - 'prod'
  pull_request:
    branches:
      - 'main'
      - 'prod'

jobs:

  lint:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Invoke Lint Code Base Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Lint Code Base
          token: ${{ secrets.PERSONAL_TOKEN }}

          
  terraform_validation:
    defaults:
        run:
          working-directory: ./deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - uses: hashicorp/setup-terraform@v1.2.1
      
    - name: Terraform Init with no Backend
      run: terraform init -backend=false
    
    - name: Terraform FMT
      run: terraform fmt -check
      
    - name: Terraform Validate
      run: terraform validate


  build_and_push:
    needs: [lint, terraform_validation]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - uses: actions/checkout@v2

    - name: Build, tag, and push image to Amazon ECR
      id: image-build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPO }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

        
  staging_plan:
    needs: build_and_push
    if: always()
    defaults:
        run:
          working-directory: ./deploy
    runs-on: ubuntu-latest
    env:
      TF_VAR_telemetry_app_image: 128363080680.dkr.ecr.eu-west-1.amazonaws.com/telemetry-app:${{ github.sha }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
    
      - uses: hashicorp/setup-terraform@v1.2.1

      - name: Terraform Init
        run: terraform init
        
      - name: Terraform Workspace Select or Create
        run: terraform workspace select staging || terraform workspace new staging
        
      - name: Terraform Plan
        run: terraform plan
        
        
  staging_apply:
    needs: staging_plan
    if: always()
    defaults:
        run:
          working-directory: ./deploy
    runs-on: ubuntu-latest
    env:
      TF_VAR_telemetry_app_image: 128363080680.dkr.ecr.eu-west-1.amazonaws.com/telemetry-app:${{ github.sha }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - uses: hashicorp/setup-terraform@v1.2.1

      - name: Terraform Init
        run: terraform init
        
      - name: Terraform Workspace Select
        run: terraform workspace select staging
        
      - name: Terraform Apply
        run: terraform apply -auto-approve

        
  staging_dynamodb_seed:
    needs: staging_apply
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
        
      - name: Install AWS CLI
        run: | 
          sudo apt-get install python3-pip
          pip install awscli --upgrade
        
      - name: Conditional Put-Item API Call to DynamoDB
        run: | 
          sudo apt-get install python3-pip
          pip install awscli --upgrade
          aws dynamodb put-item \
          --table-name telemetry-staging-temperature-readings-aggregation \
          --item file://deploy/templates/dynamodb/seed.json \
          --condition-expression "attribute_not_exists(total_readings_count)" \
          || true


  prod_plan:
    needs: staging_apply
    if: github.ref == 'refs/heads/prod'
    defaults:
        run:
          working-directory: ./deploy
    runs-on: ubuntu-latest
    env:
      TF_VAR_telemetry_app_image: 128363080680.dkr.ecr.eu-west-1.amazonaws.com/telemetry-app:${{ github.sha }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
    
      - uses: hashicorp/setup-terraform@v1.2.1

      - name: Terraform Init
        run: terraform init
        
      - name: Terraform Workspace Select or Create
        run: terraform workspace select prod || terraform workspace new prod
        
      - name: Terraform Plan
        run: terraform plan

  
  prod_apply:
    needs: prod_plan
    if: github.ref == 'refs/heads/prod'
    defaults:
        run:
          working-directory: ./deploy
    runs-on: ubuntu-latest
    env:
      TF_VAR_telemetry_app_image: 128363080680.dkr.ecr.eu-west-1.amazonaws.com/telemetry-app:${{ github.sha }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - uses: hashicorp/setup-terraform@v1.2.1

      - name: Terraform Init
        run: terraform init
        
      - name: Terraform Workspace Select
        run: terraform workspace select prod
        
      - name: Terraform Apply
        run: terraform apply -auto-approve

        
  prod_dynamodb_seed:
    needs: prod_apply
    if: github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
        
      - name: Install AWS CLI
        run: | 
          sudo apt-get install python3-pip
          pip install awscli --upgrade
        
      - name: Conditional Put-Item API Call to DynamoDB
        run: | 
          sudo apt-get install python3-pip
          pip install awscli --upgrade
          aws dynamodb put-item \
          --table-name telemetry-prod-temperature-readings-aggregation \
          --item file://deploy/templates/dynamodb/seed.json \
          --condition-expression "attribute_not_exists(total_readings_count)" \
          || true
